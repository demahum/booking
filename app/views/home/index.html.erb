<!-- filepath: app/views/home/index.html.erb -->
<% content_for :title, "Booking" %>

<div class="calendar-container">
  <h1><%= t('home.title') %></h1>
  
  <!-- Custom Calendar Grid -->
  <div class="calendar-grid">
    <div class="month-navigation">
      <% # Preserve selection state when navigating months %>
      <% # Previous month link without auth_state - it's handled by the cookie now %>
      <% prev_month_params = { 
           month: (@current_month - 1.month).month, 
           year: (@current_month - 1.month).year, 
           locale: I18n.locale 
         } %>
      <% prev_month_params[:start_date] = @start_date.strftime('%Y-%m-%d') if @start_date %>
      <% prev_month_params[:end_date] = @end_date.strftime('%Y-%m-%d') if @end_date %>
      
      <%= link_to "â€¹", root_path(prev_month_params), 
          class: "nav-arrow prev-month", 
          title: t('home.navigation.previous_month'),
          data: { turbo: false } %>
      
      <h3><%= l(@current_month, format: :long) %></h3>
      
      <% # Next month link without auth_state - it's handled by the cookie now %>
      <% next_month_params = { 
           month: (@current_month + 1.month).month, 
           year: (@current_month + 1.month).year, 
           locale: I18n.locale 
         } %>
      <% next_month_params[:start_date] = @start_date.strftime('%Y-%m-%d') if @start_date %>
      <% next_month_params[:end_date] = @end_date.strftime('%Y-%m-%d') if @end_date %>
      
      <%= link_to "â€º", root_path(next_month_params), 
          class: "nav-arrow next-month", 
          title: t('home.navigation.next_month'),
          data: { turbo: false } %>
    </div>
    
    <div class="calendar">
      <div class="calendar-header">
        <div class="day-header"><%= t('home.calendar_headers.monday') %></div>
        <div class="day-header"><%= t('home.calendar_headers.tuesday') %></div>
        <div class="day-header"><%= t('home.calendar_headers.wednesday') %></div>
        <div class="day-header"><%= t('home.calendar_headers.thursday') %></div>
        <div class="day-header"><%= t('home.calendar_headers.friday') %></div>
        <div class="day-header"><%= t('home.calendar_headers.saturday') %></div>
        <div class="day-header"><%= t('home.calendar_headers.sunday') %></div>
      </div>
      
      <div class="calendar-body" id="calendar-body">
        <% start_date = @current_month.beginning_of_week(:monday) %>
        <% end_date = @current_month.end_of_month.end_of_week(:monday) %>
        
        <% (start_date..end_date).each do |date| %>
          <% is_current_month = date.month == @current_month.month %>
          <% is_today = date == Date.current %>
          <% is_booked = @booked_dates.include?(date) %>
          
          <% # Check if this date would create a conflict when selected as end date %>
          <% would_conflict = false %>
          <% if @start_date && !@end_date && date != @start_date && !is_booked %>
            <% range_start = [@start_date, date].min %>
            <% range_end = [@start_date, date].max %>
            <% would_conflict = (range_start + 1.day...range_end).any? { |d| @booked_dates.include?(d) } %>
          <% end %>
          
          <% # Determine if date is in selected range %>
          <% is_range_start = @start_date == date %>
          <% is_range_end = @end_date == date %>
          <% is_in_range = @selected_range&.include?(date) %>
          
          <% css_classes = ["calendar-day"] %>
          <% css_classes << "other-month" unless is_current_month %>
          <% css_classes << "today" if is_today %>
          <% css_classes << "booked" if is_booked %>
          <% css_classes << "would-conflict" if would_conflict %>
          <% css_classes << "range-start" if is_range_start && !is_booked %>
          <% css_classes << "range-end" if is_range_end && !is_booked %>
          <% css_classes << "in-range" if is_in_range && !is_range_start && !is_range_end && !is_booked %>
          
          <% # Create fallback URL for when JavaScript is disabled %>
          <% if @start_date && !@end_date %>
            <% # Currently selecting - this click completes the range, but only if different date %>
            <% if date == @start_date %>
              <% # Same date clicked, start new selection %>
              <% fallback_url = root_path(start_date: date.strftime('%Y-%m-%d'), month: @current_month.month, year: @current_month.year, locale: I18n.locale) %>
            <% else %>
              <% # Check if this end date would conflict with booked dates %>
              <% range_start = [@start_date, date].min %>
              <% range_end = [@start_date, date].max %>
              <% conflicts_with_bookings = (range_start + 1.day...range_end).any? { |d| @booked_dates.include?(d) } %>
              
              <% if conflicts_with_bookings %>
                <% # Conflict detected - start new selection with this date instead %>
                <% fallback_url = root_path(start_date: date.strftime('%Y-%m-%d'), month: @current_month.month, year: @current_month.year, locale: I18n.locale) %>
              <% else %>
                <% # No conflict, complete the range %>
                <% fallback_url = root_path(start_date: @start_date, end_date: date.strftime('%Y-%m-%d'), month: @current_month.month, year: @current_month.year, locale: I18n.locale) %>
              <% end %>
            <% end %>
          <% else %>
            <% # Starting new selection %>
            <% fallback_url = root_path(start_date: date.strftime('%Y-%m-%d'), month: @current_month.month, year: @current_month.year, locale: I18n.locale) %>
          <% end %>
          
          <% if is_booked || would_conflict %>
            <% # Booked dates and conflicting dates are not clickable %>
            <div class="<%= css_classes.join(' ') %>" 
                 data-date="<%= date.strftime('%Y-%m-%d') %>"
                 data-month="<%= @current_month.month %>"
                 data-year="<%= @current_month.year %>">
              <%= date.day %>
            </div>
          <% else %>
            <% # Clickable dates using regular links - cookie handles auth now %>
            <% fallback_url = if @start_date && !@end_date
                            if date == @start_date
                              # Same date clicked, start new selection
                              root_path(start_date: date.strftime('%Y-%m-%d'), month: @current_month.month, year: @current_month.year, locale: I18n.locale)
                            else
                              # Check if this end date would conflict with booked dates
                              range_start = [@start_date, date].min
                              range_end = [@start_date, date].max
                              conflicts_with_bookings = (range_start + 1.day...range_end).any? { |d| @booked_dates.include?(d) }
                              
                              if conflicts_with_bookings
                                # Conflict detected - start new selection with this date
                                root_path(start_date: date.strftime('%Y-%m-%d'), month: @current_month.month, year: @current_month.year, locale: I18n.locale)
                              else
                                # No conflict, complete the range
                                root_path(start_date: @start_date.strftime('%Y-%m-%d'), end_date: date.strftime('%Y-%m-%d'), month: @current_month.month, year: @current_month.year, locale: I18n.locale)
                              end
                            end
                         else
                            # Starting new selection
                            root_path(start_date: date.strftime('%Y-%m-%d'), month: @current_month.month, year: @current_month.year, locale: I18n.locale)
                         end
            %>
            
            <a href="<%= fallback_url %>" class="<%= css_classes.join(' ') %>" 
                data-date="<%= date.strftime('%Y-%m-%d') %>"
                data-month="<%= @current_month.month %>"
                data-year="<%= @current_month.year %>"
                data-turbo="false">
              <%= date.day %>
            </a>
          <% end %>
        <% end %>
      </div>
    </div>
    
    <!-- Day Count and Buttons Layout -->
    <div class="bottom-section">
      <!-- Day Count Display - Always visible, positioned at bottom-left of calendar -->
      <div class="day-count-container">
        <% if @start_date && @end_date %>
          <% day_count = (@end_date - @start_date).to_i %>
        <% else %>
          <% day_count = 0 %>
        <% end %>
        <div class="day-count">
          <%= t('home.days_selected', count: day_count) %>
        </div>
      </div>
      
      <div class="today-button-container">
        <% # Only show "Current Month" button if user is not viewing current month %>
        <% if @current_month.month != Date.current.month || @current_month.year != Date.current.year %>
          <% today_params = { locale: I18n.locale } %>
          <% today_params[:start_date] = @start_date.strftime('%Y-%m-%d') if @start_date %>
          <% today_params[:end_date] = @end_date.strftime('%Y-%m-%d') if @end_date %>
          <%= link_to t('home.go_to_today'), root_path(today_params), 
              class: "today-button", 
              data: { turbo: false } %>
        <% end %>
        
        <% if @start_date && @end_date %>
          <button id="show-confirmation" class="save-range-button"><%= t('home.save_range') %></button>
          
          <form action="<%= home_save_range_path %>" method="post" id="save-range-form" style="display: none;">
            <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
            <input type="hidden" name="start_date" value="<%= @start_date.strftime("%Y-%m-%d") %>">
            <input type="hidden" name="end_date" value="<%= @end_date.strftime("%Y-%m-%d") %>">
            <input type="hidden" name="locale" value="<%= I18n.locale %>">
          </form>
        <% end %>
      </div>
    </div>
  </div>
</div>

<!-- Add the toast/confirmation popup -->
<div id="confirmation-toast" class="confirmation-toast" style="display: none;">
  <div class="confirmation-content">
    <h3><%= t('home.confirm_booking') %></h3>
    <p class="date-range-display">
      <%= t('home.confirm_first_date') %> <span id="confirm-start-date"></span><br>
      <%= t('home.confirm_last_date') %> <span id="confirm-end-date"></span>
    </p>
    <div class="confirmation-buttons">
      <button id="confirm-cancel" class="btn btn-secondary"><%= t('home.cancel') %></button>
      <button id="confirm-save" class="btn btn-success"><%= t('home.confirm') %></button>
    </div>
  </div>
</div>

<script>
// Global initialization function that will run on both initial page load and after AJAX/Turbo updates
function initializeBookingUI() {
  console.log('Initializing booking UI - ' + new Date().toISOString());
  
  // Get the current locale from the page - ensure it's a string and trim whitespace
  var currentLocale = '<%= I18n.locale.to_s %>'.trim();
  console.log('Current locale detected:', currentLocale, 'Type:', typeof currentLocale);
  
  // Force locale to be a clean string, no whitespace or hidden characters
  currentLocale = currentLocale.replace(/\s/g, '');
  
  // Simple function to format dates based on locale
  function formatDate(dateStr) {
    var date = new Date(dateStr);
    var day = date.getDate();
    var month = date.getMonth();
    var year = date.getFullYear();
    
    var monthNames = {
      en: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      bs: ['Januar', 'Februar', 'Mart', 'April', 'Maj', 'Juni', 'Juli', 'August', 'Septembar', 'Oktobar', 'Novembar', 'Decembar']
    };
    
    console.log('Formatting date for locale:', currentLocale, 'Date:', date);
    
    // Check if locale is Bosnian, otherwise default to English
    // Use both === and string includes for extra safety
    if (currentLocale === 'bs' || currentLocale.indexOf('bs') >= 0) {
      console.log('Using Bosnian date format');
      return day + '. ' + monthNames.bs[month] + ' ' + year;
    } else {
      console.log('Using English date format');
      return monthNames.en[month] + ' ' + day + ', ' + year;
    }
  }

  // Remove any existing event listeners (for page refresh or locale change)
  function removeExistingListeners() {
    console.log('Removing any existing event listeners');
    
    var elements = {
      'show-confirmation': document.getElementById('show-confirmation'),
      'confirm-cancel': document.getElementById('confirm-cancel'),
      'confirm-save': document.getElementById('confirm-save'),
      'calendar-body': document.getElementById('calendar-body')
    };
    
    // Clone elements to remove all event listeners
    for (var id in elements) {
      if (elements[id]) {
        var oldElement = elements[id];
        var newElement = oldElement.cloneNode(true);
        if (oldElement.parentNode) {
          oldElement.parentNode.replaceChild(newElement, oldElement);
          console.log('Replaced element with clone:', id);
        }
      }
    }
  }

  // Handle calendar day clicks for selection
  function setupCalendarClicks() {
    var calendarBody = document.getElementById('calendar-body');
    if (calendarBody) {
      calendarBody.addEventListener('click', function(event) {
        var dateLink = event.target.closest('.calendar-day');
        if (!dateLink || dateLink.classList.contains('booked') || dateLink.classList.contains('would-conflict')) {
          return;
        }
        
        event.preventDefault();
        var url = dateLink.getAttribute('href');
        if (url) {
          window.location.href = url;
        }
      });
      console.log('Calendar click handler attached');
    }
  }
  
  // Setup confirmation popup functionality
  function setupConfirmationPopup() {
    console.log('Setting up confirmation popup for locale:', currentLocale);
    
    // Get all necessary elements
    var showConfirmationBtn = document.getElementById('show-confirmation');
    var confirmationToast = document.getElementById('confirmation-toast');
    var confirmStartDate = document.getElementById('confirm-start-date');
    var confirmEndDate = document.getElementById('confirm-end-date');
    var saveForm = document.getElementById('save-range-form');
    var cancelBtn = document.getElementById('confirm-cancel');
    var confirmBtn = document.getElementById('confirm-save');
    
    // Log button text and classes to help with debugging
    console.log('Save Range Button:', showConfirmationBtn ? {
      id: showConfirmationBtn.id,
      text: showConfirmationBtn.textContent,
      classes: showConfirmationBtn.className,
      disabled: showConfirmationBtn.disabled
    } : 'Not found');
    
    // Only proceed if required elements are found
    if (!showConfirmationBtn || !confirmationToast) {
      console.error('Missing critical elements for confirmation popup');
      return;
    }
    
    // Show confirmation popup when save button is clicked
    console.log('Adding click event listener to save button');
    
    // Create a single handler function for all event types
    function showPopupHandler(e) {
      e.preventDefault();
      e.stopPropagation();
      console.log('Save button event triggered - locale:', currentLocale);
      
      try {
        // Show popup first, to ensure UI responsiveness
        confirmationToast.style.display = 'flex';
        
        // Then populate the dates if possible
        if (saveForm && confirmStartDate && confirmEndDate) {
          var startDateInput = saveForm.querySelector('[name="start_date"]');
          var endDateInput = saveForm.querySelector('[name="end_date"]');
          
          if (startDateInput && endDateInput) {
            var startDate = startDateInput.value;
            var endDate = endDateInput.value;
            
            confirmStartDate.textContent = formatDate(startDate);
            confirmEndDate.textContent = formatDate(endDate);
            console.log('Dates formatted and displayed');
          }
        }
      } catch(error) {
        console.error('Error showing confirmation:', error);
      }
      
      return false;
    }
    
    // Add multiple event types to ensure it works
    ['click', 'mousedown', 'touchstart'].forEach(function(eventType) {
      showConfirmationBtn.addEventListener(eventType, showPopupHandler, true);
    });
    
    // Make sure the button appears clickable
    showConfirmationBtn.style.cursor = 'pointer';
    
    // Handle cancel button
    if (cancelBtn) {
      cancelBtn.addEventListener('click', function() {
        console.log('Cancel button clicked');
        confirmationToast.style.display = 'none';
      });
    }
    
    // Handle confirm button - submit the form
    if (confirmBtn && saveForm) {
      confirmBtn.addEventListener('click', function() {
        console.log('Confirm button clicked, submitting form');
        confirmationToast.style.display = 'none';
        saveForm.submit();
      });
    }
    
    console.log('Confirmation popup setup complete');
  }
  
  // First remove any existing listeners to avoid duplicates
  removeExistingListeners();
  
  // Setup all handlers
  setupCalendarClicks();
  setupConfirmationPopup();
}

// Make the initialization function globally available
window.initializeBookingUI = initializeBookingUI;

// Run on DOMContentLoaded
document.addEventListener('DOMContentLoaded', function() {
  console.log('Document loaded - Starting initial setup');
  initializeBookingUI();
});

// Custom event for locale changes
document.addEventListener('localeChanged', function(event) {
  console.log('Locale changed event received:', event.detail);
  initializeBookingUI();
});

// Run after page loads (including ajax-based locale changes)
window.addEventListener('load', function() {
  console.log('Window loaded - Reinitializing');
  setTimeout(initializeBookingUI, 100); // Small delay to ensure DOM is updated
});

// For Turbo Drive / Turbolinks
document.addEventListener('turbo:load', function() {
  console.log('Turbo load detected - Reinitializing');
  initializeBookingUI();
});

document.addEventListener('turbolinks:load', function() {
  console.log('Turbolinks load detected - Reinitializing');
  initializeBookingUI();
});

// Check if the page is already loaded
if (document.readyState === 'complete') {
  console.log('Document already loaded - Initializing immediately');
  setTimeout(initializeBookingUI, 1);
}
</script>